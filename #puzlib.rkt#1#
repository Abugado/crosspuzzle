#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 155 210 53 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 155 210 53 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 195 177 53 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 195 177 53 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 113 79 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 113 79 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
48 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
27 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 18
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 699 0 14 3 6 #"p#lang"
0 0 27 3 1 #" "
0 0 14 3 6 #"racket"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 78
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 27 29 1 #"\n"
0 0 18 3 61
#";; puzlib :: A module to provide useful helper functions for "
0 0 27 29 1 #"\n"
0 0 18 3 46 #";;           CS 135, Fall 2015, Assignment 10 "
0 0 27 29 1 #"\n"
0 0 18 3 41 #";;           by Dave Tompkins [dtompkins]"
0 0 27 29 1 #"\n"
0 0 18 3 78
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 7 #"provide"
0 0 27 3 1 #" "
0 0 14 3 11 #"read-puzzle"
0 0 27 3 1 #" "
0 0 14 3 5 #"solve"
0 0 27 3 1 #" "
0 0 14 3 4 #"disp"
0 0 27 3 1 #" "
0 0 14 3 12 #"lists-equiv?"
0 0 27 3 1 #" "
0 0 14 3 11 #"unused-cell"
0 0 27 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 37 #";; read-puzzle: read in a puzzle file"
0 0 27 29 1 #"\n"
0 0 18 3 34 #";; solve: performs the main search"
0 0 27 29 1 #"\n"
0 0 18 3 61
#";; disp: display a list of strings in the interactions window"
0 0 27 29 1 #"\n"
0 0 18 3 35 #";; lists-equiv?: useful for testing"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";; unused-cell, empty-cell: constants for grids & puzzle files"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 38 #";; constants for grids & puzzle files:"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 12 #"comment-char"
0 0 27 3 1 #" "
0 0 23 3 3 #"#\\;"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 11 #"unused-cell"
0 0 27 3 1 #" "
0 0 23 3 3 #"#\\."
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 27 3 1 #" "
0 0 23 3 3 #"#\\#"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 59
#";; (grid-char? c) determines if c is a valid grid character"
0 0 27 29 1 #"\n"
0 0 18 3 26 #";; grid-char: Char -> Bool"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"grid-char?"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 27 3 2 #" ("
0 0 14 3 6 #"char=?"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #" "
0 0 14 3 11 #"unused-cell"
0 0 27 3 3 #") ("
0 0 14 3 6 #"char=?"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 64
#";; (next-line stream type) reads in a line from the file stream,"
0 0 27 29 1 #"\n"
0 0 18 3 53 #";;   verifying the line type ('numeric, 'grid, 'word)"
0 0 27 29 1 #"\n"
0 0 18 3 54 #";;   ignoring any lines starting with a semi-colon (;)"
0 0 27 29 1 #"\n"
0 0 18 3 37 #";; next-line: 'FileStream' Sym -> Str"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"next-line"
0 0 27 3 1 #" "
0 0 14 3 6 #"stream"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"line"
0 0 27 3 2 #" ("
0 0 14 3 9 #"read-line"
0 0 27 3 1 #" "
0 0 14 3 6 #"stream"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 11 #"eof-object?"
0 0 27 3 1 #" "
0 0 14 3 4 #"line"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 28 #"\"error: reached end of file\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          [("
0 0 14 3 6 #"char=?"
0 0 27 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 27 3 1 #" "
0 0 14 3 4 #"line"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 2 #") "
0 0 14 3 12 #"comment-char"
0 0 27 3 3 #") ("
0 0 14 3 9 #"next-line"
0 0 27 3 1 #" "
0 0 14 3 6 #"stream"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"numeric"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 27 3 1 #" "
0 0 14 3 4 #"line"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 38 #"\"error: invalid numeric input in file\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"grid"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"andmap"
0 0 27 3 1 #" "
0 0 14 3 10 #"grid-char?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 27 3 1 #" "
0 0 14 3 4 #"line"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 40 #"\"error: invalid grid characters in file\""
0 0 27 3 2 #")]"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          [("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 27 3 1 #" "
0 0 14 3 4 #"type"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"word"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 17 #"                ("
0 0 14 3 3 #"not"
0 0 27 3 2 #" ("
0 0 14 3 6 #"andmap"
0 0 27 3 1 #" "
0 0 14 3 16 #"char-alphabetic?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 27 3 1 #" "
0 0 14 3 4 #"line"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"           ("
0 0 14 3 5 #"error"
0 0 27 3 1 #" "
0 0 20 3 40 #"\"error: invalid word characters in file\""
0 0 27 3 12 #")]          "
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 14 3 4 #"line"
0 0 27 3 4 #"])))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 67
#";; (read-puzzle filename) reads in the puzzle contained in filename"
0 0 27 29 1 #"\n"
0 0 18 3 43 #";;   and produces a list with two elements:"
0 0 27 29 1 #"\n"
0 0 18 3 61
#";;   * the puzzle grid (a listof str) [with only .'s and #'s]"
0 0 27 29 1 #"\n"
0 0 18 3 24 #";;   * the list of words"
0 0 27 29 1 #"\n"
0 0 18 3 54 #";; read-puzzle Str -> (list (listof Str) (listof Str))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"read-puzzle"
0 0 27 3 1 #" "
0 0 14 3 8 #"filename"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 2 #"in"
0 0 27 3 2 #" ("
0 0 14 3 15 #"open-input-file"
0 0 27 3 1 #" "
0 0 14 3 8 #"filename"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"numlines"
0 0 27 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 27 3 2 #" ("
0 0 14 3 9 #"next-line"
0 0 27 3 1 #" "
0 0 14 3 2 #"in"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"numeric"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 4 #"grid"
0 0 27 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 27 3 1 #" "
0 0 14 3 8 #"numlines"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 9 #"next-line"
0 0 27 3 1 #" "
0 0 14 3 2 #"in"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"grid"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 8 #"numwords"
0 0 27 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 27 3 2 #" ("
0 0 14 3 9 #"next-line"
0 0 27 3 1 #" "
0 0 14 3 2 #"in"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"numeric"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"words"
0 0 27 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 27 3 1 #" "
0 0 14 3 8 #"numwords"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 1 #"n"
0 0 27 3 3 #") ("
0 0 14 3 9 #"next-line"
0 0 27 3 1 #" "
0 0 14 3 2 #"in"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"words"
0 0 27 3 5 #"))))]"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 27 3 1 #" "
0 0 14 3 4 #"grid"
0 0 27 3 1 #" "
0 0 14 3 5 #"words"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 56 #";; Note that in the following contracts, X is your State"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 75
(
 #";; (solve initial-state neighbours solved?) solves the problem by se"
 #"arching"
) 0 0 27 29 1 #"\n"
0 0 18 3 70
(
 #";;   from an initial-state until a solution is found (solved? is tru"
 #"e)"
) 0 0 27 29 1 #"\n"
0 0 18 3 36 #";;   or false if no solution exists."
0 0 27 29 1 #"\n"
0 0 18 3 72
(
 #";;   neighbours produces a list of legal next states from a given st"
 #"ate."
) 0 0 27 29 1 #"\n"
0 0 18 3 65
#";; find-route: X (X -> (listof X)) (X -> Bool) -> (anyof false X)"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"solve"
0 0 27 3 1 #" "
0 0 14 3 13 #"initial-state"
0 0 27 3 1 #" "
0 0 14 3 10 #"neighbours"
0 0 27 3 1 #" "
0 0 14 3 7 #"solved?"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ["
0 0 18 3 52 #";; (solve/single state) searches outward from state "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 27 #";;   looking for a solution"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 37 #";; solve/single: X -> (anyof false X)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"solve/single"
0 0 27 3 1 #" "
0 0 14 3 5 #"state"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 7 #"solved?"
0 0 27 3 1 #" "
0 0 14 3 5 #"state"
0 0 27 3 2 #") "
0 0 14 3 5 #"state"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 10 #"solve/list"
0 0 27 3 2 #" ("
0 0 14 3 10 #"neighbours"
0 0 27 3 1 #" "
0 0 14 3 5 #"state"
0 0 27 3 5 #"))]))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 60
#";; (solve/list lostate) searches from every state in lostate"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 27 #";;   looking for a solution"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"     "
0 0 18 3 44 #";; solve/list: (listof X) -> (anyof false X)"
0 0 27 29 1 #"\n"
0 0 27 3 6 #"     ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 10 #"solve/list"
0 0 27 3 1 #" "
0 0 14 3 7 #"lostate"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 27 3 1 #" "
0 0 14 3 7 #"lostate"
0 0 27 3 2 #") "
0 0 14 3 5 #"false"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 7 #"fresult"
0 0 27 3 2 #" ("
0 0 14 3 12 #"solve/single"
0 0 27 3 2 #" ("
0 0 14 3 5 #"first"
0 0 27 3 1 #" "
0 0 14 3 7 #"lostate"
0 0 27 3 4 #")))]"
0 0 27 29 1 #"\n"
0 0 27 3 22 #"                     ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"false?"
0 0 27 3 1 #" "
0 0 14 3 7 #"fresult"
0 0 27 3 3 #") ("
0 0 14 3 10 #"solve/list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 27 3 1 #" "
0 0 14 3 7 #"lostate"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 28 #"                           ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 14 3 7 #"fresult"
0 0 27 3 7 #"]))]))]"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 12 #"solve/single"
0 0 27 3 1 #" "
0 0 14 3 13 #"initial-state"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 71
(
 #";; (disp los) displays a list of strings los in the interactions win"
 #"dow"
) 0 0 27 29 1 #"\n"
0 0 18 3 38 #";;   replacing periods (.) with spaces"
0 0 27 29 1 #"\n"
0 0 18 3 29 #";; disp: (listof Str) -> Void"
0 0 27 29 1 #"\n"
0 0 18 3 54 #";; effects: displays result in the interactions window"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 4 #"disp"
0 0 27 3 1 #" "
0 0 14 3 3 #"los"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 5 #"local"
0 0 27 3 3 #" [("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 6 #"los/lf"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 1 #"s"
0 0 27 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 27 3 1 #" "
0 0 14 3 1 #"s"
0 0 27 3 1 #" "
0 0 20 3 4 #"\"\\n\""
0 0 27 3 3 #")) "
0 0 14 3 3 #"los"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"loc"
0 0 27 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 6 #"append"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 12 #"string->list"
0 0 27 3 1 #" "
0 0 14 3 6 #"los/lf"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 5 #"clean"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 1 #"c"
0 0 27 3 3 #") ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" [("
0 0 14 3 6 #"char=?"
0 0 27 3 1 #" "
0 0 14 3 11 #"unused-cell"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 2 #") "
0 0 23 3 7 #"#\\space"
0 0 27 3 1 #"]"
0 0 27 29 1 #"\n"
0 0 27 3 43 #"                                          ["
0 0 14 3 4 #"else"
0 0 27 3 1 #" "
0 0 14 3 1 #"c"
0 0 27 3 4 #"])) "
0 0 14 3 3 #"loc"
0 0 27 3 3 #"))]"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 27 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 27 3 1 #" "
0 0 14 3 5 #"clean"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 54 #";; lists-equiv? is not really part of this assignment,"
0 0 27 29 1 #"\n"
0 0 18 3 68
#";; but generally useful in tests where we don't care about ordering."
0 0 27 29 1 #"\n"
0 0 18 3 62
#";; The approach is a bit sneaky, but very succinct: Check that"
0 0 27 29 1 #"\n"
0 0 18 3 68
#";; every element of l1 appears somewhere in l2 (in terms of equal?),"
0 0 27 29 1 #"\n"
0 0 18 3 57 #";; and that every elements of l2 appears somewhere in l1."
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 73
(
 #";; (lists-equiv? l1 l2) determines whether the l1 and l2 are \"equiv"
 #"alent\""
) 0 0 27 29 1 #"\n"
0 0 18 3 51 #";;   and are essentially the same up to reordering."
0 0 27 29 1 #"\n"
0 0 18 3 50 #";; lists-equiv?: (listof Any) (listof Any) -> Bool"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";; requires: elements of l1 (or l2) are unique (no duplicates)"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"lists-equiv?"
0 0 27 3 1 #" "
0 0 14 3 2 #"l1"
0 0 27 3 1 #" "
0 0 14 3 2 #"l2"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 27 3 2 #" ("
0 0 14 3 1 #"="
0 0 27 3 2 #" ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 2 #"l1"
0 0 27 3 3 #") ("
0 0 14 3 6 #"length"
0 0 27 3 1 #" "
0 0 14 3 2 #"l2"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"andmap"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 2 #"x1"
0 0 27 3 3 #") ("
0 0 14 3 5 #"ormap"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 2 #"x2"
0 0 27 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 2 #"x1"
0 0 27 3 1 #" "
0 0 14 3 2 #"x2"
0 0 27 3 3 #")) "
0 0 14 3 2 #"l2"
0 0 27 3 3 #")) "
0 0 14 3 2 #"l1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"andmap"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 2 #"x2"
0 0 27 3 3 #") ("
0 0 14 3 5 #"ormap"
0 0 27 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 27 3 2 #" ("
0 0 14 3 2 #"x1"
0 0 27 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 2 #"x1"
0 0 27 3 1 #" "
0 0 14 3 2 #"x2"
0 0 27 3 3 #")) "
0 0 14 3 2 #"l1"
0 0 27 3 3 #")) "
0 0 14 3 2 #"l2"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0           0
